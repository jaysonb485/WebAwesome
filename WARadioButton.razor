@inherits WAComponentBase
<wa-radio-button @ref="@Element"
id="@Id"
@attributes="@AdditionalAttributes"
style="@StyleNames"
class="@ClassNames"
value="@Value"
disabled="@Disabled"
pill="@Pill">
    @if (!String.IsNullOrEmpty(StartIconName))
    {
        <wa-icon name="@StartIconName" variant="@StartIconVariant" family="@StartIconFamily" slot="prefix"></wa-icon>
    }
    @if (!String.IsNullOrEmpty(EndIconName))
    {
        <wa-icon name="@EndIconName" variant="@EndIconVariant" family="@EndIconFamily" slot="suffix"></wa-icon>
    }
@Label</wa-radio-button>

@code {
    /// <summary>
    /// The option's value. When selected, the radio group will receive this value.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// The option's label
    /// </summary>
    [Parameter]
    public string? Label { get; set; }
    /// <summary>
    /// Disables the option
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// The options's size. When used inside a radio group, the size will be determined by the radio group's size so this attribute can typically be omitted.
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

    /// <summary>
    /// Draws a pill-style radio button with rounded edges.
    /// </summary>
    [Parameter]
    public bool Pill { get; set; } = false;

    /// <summary>
    /// The name of the icon to draw in the prefix slot. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? StartIconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the prefix slot icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? StartIconFamily { get; set; }
    /// <summary>
    /// The name of the prefix slot icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? StartIconVariant { get; set; }
    /// <summary>
    /// The name of the icon to draw in the suffix slot. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? EndIconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the suffix slot. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? EndIconFamily { get; set; }
    /// <summary>
    /// The name of the suffix slot icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? EndIconVariant { get; set; }
}
