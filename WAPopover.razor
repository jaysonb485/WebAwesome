@using Microsoft.JSInterop
@inherits WAComponentBase


<wa-popover @ref="@Element"
            id="@Id"
            @attributes="@AdditionalAttributes"
            style="@StyleNames"
            class="@ClassNames"
            slot="@Slot"
            for="@TargetId"
            placement="@PlacementString"
            open="@Open"
            distance="@Distance"
            skidding="@Skidding"
            without-arrow="@WithoutArrow">
    @ChildContent
</wa-popover>
@code {

    private DotNetObjectReference<WAPopover> objRef = default!;

    /// <summary>
    /// The ID of the popover's anchor element. This must be an interactive/focusable element such as a button.
    /// </summary>
    [Parameter,EditorRequired]
    public string? TargetId { get; set; }

    [Parameter]
    public Enums.Placement Placement { get; set; } = Enums.Placement.BottomStart;
    string PlacementString
    {
        get
        {
            return Placement switch
            {
                Enums.Placement.Top => "top",
                Enums.Placement.TopStart => "top-start",
                Enums.Placement.TopEnd => "top-end",
                Enums.Placement.Bottom => "bottom",
                Enums.Placement.BottomStart => "bottom-start",
                Enums.Placement.BottomEnd => "bottom-end",
                Enums.Placement.Right => "right",
                Enums.Placement.RightStart => "right-start",
                Enums.Placement.RightEnd => "right-end",
                Enums.Placement.Left => "left",
                Enums.Placement.LeftStart => "left-start",
                Enums.Placement.LeftEnd => "left-end",
                _ => "bottom-start"
            };
        }
    }

    /// <summary>
    /// Shows or hides the popover.
    /// </summary>
    [Parameter]
    public bool Open { get; set; } = false;

    /// <summary>
    /// The distance in pixels from which to offset the popover away from its trigger.
    /// </summary>
    [Parameter]
    public int Distance { get; set; } = 0;

    /// <summary>
    /// The distance in pixels from which to offset the popover along its target.
    /// </summary>
    [Parameter]
    public int Skidding { get; set; } = 0;

    /// <summary>
    /// Removes the arrow from the popover.
    /// </summary>
    [Parameter]
    public bool WithoutArrow { get; set; } = false;

    /// <summary>
    /// Shows the popover
    /// </summary>
    public async Task ShowPopoverAsync()
    {
        Open = true;
        await JSRuntime.InvokeVoidAsync("window.vengage.popover.show", Id);
    }

    /// <summary>
    /// Hides the popover
    /// </summary>
    public async Task HidePopoverAsync()
    {
        Open = false;
        await JSRuntime.InvokeVoidAsync("window.vengage.popover.hide", Id);
    }

    /// <summary>
    /// Toggles the popover
    /// </summary>
    public async Task TogglePopoverAsync()
    {
        Open = !Open;
        if(Open)
        {
            await JSRuntime.InvokeVoidAsync("window.vengage.popover.show", Id);
            return;
        }
        await JSRuntime.InvokeVoidAsync("window.vengage.popover.hide", Id);
        

    }

    [JSInvokable]
    public async Task HandlePopoverHide(string eventType, EventArgs eventArgs)
    {
        if(Open) 
            Open = false;
    }

    [JSInvokable]
    public async Task HandlePopoverShow(string eventType, EventArgs eventArgs)
    {
        if(!Open) 
            Open = true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("window.vengage.popover.initialize", Id, objRef);
        }
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            try
            {
                // if (IsRenderComplete)
                // await JSRuntime.InvokeVoidAsync("window.blazorBootstrap.modal.dispose", Id);
            }
            catch (JSDisconnectedException)
            {
                // do nothing
            }

            objRef?.Dispose();

            // if (ModalService is not null && IsServiceModal)
            //     ModalService.OnShow -= OnShowAsync;
        }

        await base.DisposeAsyncCore(disposing);
    }



}
