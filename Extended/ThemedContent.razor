@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
<HeadContent> 
@*         <link rel="stylesheet" href="@ThemeStyleSheetUrl" />
        <link rel="stylesheet" href="@PaletteStyleSheetUrl" />
 *@        <style>
            body {
                display: none;
            }

            body.initialized {
                display: unset !important;
            }
        </style>
</HeadContent>

@* @if(IsInitialized)
{
    <div class="@CompliedThemeClass">
    @ChildContent
    </div>
}
 *@

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Theme ThemeName { get; set; } = Theme.Default;

    [Parameter]
    public BrandColor Color { get; set; } = BrandColor.Blue;

    [Parameter]
    public ColorPalette Palette { get; set; } = ColorPalette.Default;

    private bool IsInitialized { get; set; } = false;
    // private string CompliedThemeClass { get
    //     {
    //         return $"wa-theme-{ThemeName.ToString().ToLower()} wa-palette-{Palette.ToString().ToLower()} wa-brand-{Color.ToString().ToLower()}";
    //     }
    // }

    private string? ThemeStyleSheetUrl { get; set; }
    //private string? ColorStyleSheetUrl { get; set; }
    private string? PaletteStyleSheetUrl { get; set; }

    // protected override async Task OnParametersSetAsync()
    // {

    //     //IsInitialized = true;
    //     await InvokeAsync(StateHasChanged);
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && !IsInitialized)
        {

            await JSRuntime.InvokeVoidAsync("window.vengage.themeManager.initialize", ThemeName.ToString().ToLower(), Palette.ToString().ToLower(), Color.ToString().ToLower());
            IsInitialized = true;    
        }

        ThemeStyleSheetUrl = $"{Config.WebAwesomeBaseURL}/styles/themes/{ThemeName.ToString()!.ToLower()}.css";
        await JSRuntime.InvokeVoidAsync("window.vengage.themeManager.setStyleSheet", ThemeStyleSheetUrl);

        //ColorStyleSheetUrl = $"{Config.WebAwesomeBaseURL}/styles/brand/{Color.ToString()!.ToLower()}.css";
        PaletteStyleSheetUrl = $"{Config.WebAwesomeBaseURL}/styles/color/palettes/{Palette.ToString()!.ToLower()}.css";
        await JSRuntime.InvokeVoidAsync("window.vengage.themeManager.setStyleSheet", PaletteStyleSheetUrl);
    }

    public async Task SetDarkMode(bool DarkMode)
    {
        await JSRuntime.InvokeVoidAsync("window.vengage.themeManager.setDarkMode", DarkMode);
    }

    public enum Theme
    {
        Default,
        Awesome,
        Shoelace,
        Active,
        Brutalist,
        Glossy,
        Matter,
        Mellow,
        Playful,
        Premium,
        Tailspin
    }

    public enum BrandColor
    {
        Red,
        Orange,
        Yellow,
        Green,
        Cyan,
        Blue,
        Indigo,
        Purple, 
        Pink,
        Gray
    }

    public enum ColorPalette
    {
        Default,
        Bright,
        Shoelace,
        Rudimentary,
        Elegant,
        Mild,
        Natural,
        Anodized,
        Vogue
    }
}
