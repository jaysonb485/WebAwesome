@inherits WAComponentBase
<wa-avatar @ref="@Element"
           id="@Id"
           @attributes="@AdditionalAttributes"
           slot="@Slot"
           label="@Label"
           image="@ImageSource"
           initials="@Initials"
           style="@StyleNames"
           class="@ClassNames">
    @if (!String.IsNullOrEmpty(IconName) && String.IsNullOrEmpty(Name))
    {
        <wa-icon slot="icon" name="@IconName" variant="@IconVariant" family="@IconFamily"></wa-icon>
    }
</wa-avatar>

@code {
    /// <summary>
    /// The name of the icon to draw in the prefix slot. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the prefix slot icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? IconFamily { get; set; }
    /// <summary>
    /// The name of the prefix slot icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? IconVariant { get; set; }


    /// <summary>
    /// The image source to use for the avatar.
    /// </summary>
    [Parameter]
    public string? ImageSource { get; set; }
    /// <summary>
    /// Initials to use as a fallback when no image is available (1-2 characters max recommended).
    /// </summary>

    string? Initials
    {
        get
        {
            if (String.IsNullOrEmpty(Name)) return String.Empty;

            string[] names = Name.Split(" ");
            if (names.Length == 0) return String.Empty;
            if (names.Length == 1) return names[0].First().ToString();
            return (names[0].First().ToString() + names.Last().First().ToString());
        }
    }

    string Label
    {
        get
        {
            if (string.IsNullOrEmpty(Name)) return "Avatar";
            return Name;
        }
    }

    /// <summary>
    /// Set the name to use as initials if an image is not provided.
    /// The initials will use first letter of first name and last name (if provided).
    /// The name also provides a label to use to describe the avatar to assistive devices.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Indicates how the browser should load the image.
    /// </summary>
    [Parameter]
    public bool LazyLoading { get; set; } = false;
    string loading
    {
        get
        {
            return LazyLoading ? "lazy" : "eager";
        }
    }

    /// <summary>
    /// The shape of the avatar.
    /// </summary>
    [Parameter]
    public Enums.AvatarShape Shape { get; set; } = Enums.AvatarShape.Circle;

    string ShapeString
    {
        get
        {
            return Shape switch
            {
                Enums.AvatarShape.Circle => "circle",
                Enums.AvatarShape.Square => "square",
                Enums.AvatarShape.Rounded => "rounded",
                _ => "circle"
            };
        }
    }

}
