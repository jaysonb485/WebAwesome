@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Linq.Expressions
@inherits WAComponentBase
<wa-rating @ref="@Element"
id="@Id"
@attributes="@AdditionalAttributes"
style="@StyleNames"
class="@ClassNames"
value="@Value"
max="@MaximumRating"
precision="@RatingPrecision"
readonly="@ReadOnly"
disabled="@Disabled"
size="@SizeString"
label="@Label" ></wa-rating>

@code {
    /// <summary>
    /// The current rating.
    /// </summary>
    [Parameter]
    public int Value { get; set; } = 0;

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }
    private DotNetObjectReference<WARating> objRef = default!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("interceptChangeEvent", Id, objRef);
        }
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            try
            {
                // if (IsRenderComplete)
                // await JSRuntime.InvokeVoidAsync("window.blazorBootstrap.modal.dispose", Id);
            }
            catch (JSDisconnectedException)
            {
                // do nothing
            }

            objRef?.Dispose();

            // if (ModalService is not null && IsServiceModal)
            //     ModalService.OnShow -= OnShowAsync;
        }

        await base.DisposeAsyncCore(disposing);
    }

    protected override async Task OnInitializedAsync()
    {
        objRef ??= DotNetObjectReference.Create(this);

        // if (ModalService is not null && IsServiceModal)
        //     ModalService.OnShow += OnShowAsync;

        await base.OnInitializedAsync();
    }

    [JSInvokable("OnValueChanged")]
    public void OnSelectionChanged(int value)
    {
        Console.WriteLine($"onchange {value}");
        ValueChanged.InvokeAsync(value);
        EditContext?.NotifyFieldChanged(fieldIdentifier);
    }

    [Parameter] public Expression<Func<int>> ValueExpression { get; set; } = default!;
    [CascadingParameter] private EditContext EditContext { get; set; } = default!;

    private FieldIdentifier fieldIdentifier = default!;

    protected override void OnInitialized()
    {
        AdditionalAttributes ??= new Dictionary<string, object>();

        fieldIdentifier = FieldIdentifier.Create(ValueExpression);

        base.OnInitialized();
    }



    /// <summary>
    /// A label that describes the rating to assistive devices.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// The highest rating to show.
    /// </summary>
    [Parameter]
    public int MaximumRating { get; set; } = 5;
    /// <summary>
    /// The precision at which the rating will increase and decrease. For example, to allow half-star ratings, set this attribute to 0.5.
    /// </summary>
    [Parameter]
    public decimal RatingPrecision { get; set; } = 1;

    /// <summary>
    /// Makes the rating readonly.
    /// </summary>
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    /// <summary>
    /// Disables the rating.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;
    /// <summary>
    /// The component's size.
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }
}
