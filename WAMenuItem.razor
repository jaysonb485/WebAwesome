@inherits WAComponentBase
<wa-menu-item @ref="@Element"
              id="@Id"
              @attributes="@AdditionalAttributes"
              style="@StyleNames"
              class="@ClassNames"
              disabled="@Disabled"
              loading="@Loading"
              type="@(IsCheckbox ? "checkbox" : "normal")"
              checked="@Value"
              value="@Value"
              @onchange="OnChange"
              @onclick="Clicked">
    @if (PrefixContent != null)
    {
        <span slot="prefix">
            @PrefixContent
        </span>
    }
    @Label
    @ChildContent
    @if (SuffixContent != null)
    {
        <span slot="suffix">
            @SuffixContent
        </span>
    }
</wa-menu-item>

@code {
    /// <summary>
    /// Optional content to display in the prefix position, typically an icon.
    /// </summary>
    [Parameter]
    public RenderFragment? PrefixContent { get; set; }

    /// <summary>
    /// Optional content to display in the suffix position, typically a badge or icon.
    /// </summary>
    [Parameter]
    public RenderFragment? SuffixContent { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Adds the disabled attribute to disable the menu item so it cannot be selected.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// The text to display on the menu item
    /// </summary>
    [Parameter]
    public string? Label { get; set; }


    /// <summary>
    /// Adds a loading spinner to indicate that a menu item is busy. Like a disabled menu item, clicks will be suppressed until the loading state is removed.
    /// </summary>
    [Parameter]
    public bool Loading { get; set; } = false;

    /// <summary>
    /// Indicates the menu item can be checked. To use Checked, this value must be true.
    /// </summary>
    [Parameter]
    public bool IsCheckbox { get; set; } = false;

    /// <summary>
    /// Draws the item in a checked state.
    /// </summary>
    [Parameter]
    public bool Value { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; } = default!;

    [Parameter]
    public EventCallback<MouseEventArgs?> OnClick { get; set; }

    private async Task OnChange(ChangeEventArgs e)
    {
        var oldValue = Value;
        var newValue = e.Value is not null && (bool)e.Value;

        await ValueChanged.InvokeAsync(newValue);

        //EditContext?.NotifyFieldChanged(fieldIdentifier);
    }

    private async Task Clicked(MouseEventArgs e)
    {
        if (IsCheckbox)
        {
            await ValueChanged.InvokeAsync(!Value);
            return;
        }
        await OnClick.InvokeAsync();
        //EditContext?.NotifyFieldChanged(fieldIdentifier);
    }

    /// <summary>
    /// Turn off or on the loading indicator.
    /// </summary>
    /// <param name="LoadingState">Set to true to show the loading indicator.</param>
    public void SetLoading(bool LoadingState)
    {
        Loading = LoadingState;
        StateHasChanged();
    }

    [EventHandler("onwaselectevent", typeof(EventArgs), enableStopPropagation: true, enablePreventDefault: true)]
    public static class EventHandlers
    {

    }
}
