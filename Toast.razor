@inherits WAComponentBase
@if (toastMessage != null)
{
    <div class="toast-message @ClassNames" style="@StyleNames">
        <div class="wa-stack wa-gap-0 ">
            <div class="wa-flank toast-body wa-align-items-center justify-content-center ">
                @if (!String.IsNullOrEmpty(toastMessage.IconName))
                {
                    <WAIcon IconName="toastMessage.IconName" IconVariant="toastMessage.IconVariant" IconFamily="toastMessage.IconFamily" />
                }
                <div class="wa-flank:end">
                    <div class="wa-stack wa-gap-xs">
                        <strong>@toastMessage.Title</strong>
                        <p>@toastMessage.Message</p>
                    </div>
                    @if (toastMessage.Dismissable && toastMessage.Timeout == 0)
                    {
                        <WAIconButton IconName="xmark" IconVariant="solid" OnClick="DismissToast" Style="--background-color-hover: var(--wa-color-fill-normal);"  />
                    }
                </div>

            </div>
            @if(progressBarValue > -1){
                <WAProgressBar Value="@progressBarValue" Height="5px" Style="border-radius: 0; --indicator-color: var(--wa-color-on-quiet); background-color: var(--wa-color-fill-quiet);" />
            }
        </div>
    </div>
}
@code {
    [Parameter]
    public ToastMessages.ToastMessage toastMessage { get; set; } = default!;
    protected override string ClassNames => BuildClassNames(Class,
        ($"wa-brand", toastMessage.Variant == Enums.Variant.Brand),
        ($"wa-neutral", toastMessage.Variant == Enums.Variant.Neutral),
        ($"wa-success", toastMessage.Variant == Enums.Variant.Success),
        ($"wa-warning", toastMessage.Variant == Enums.Variant.Warning),
        ($"wa-danger", toastMessage.Variant == Enums.Variant.Danger)
    );

    [Parameter]
    public EventCallback OnDismissToast { get; set; }

    decimal progressBarValue { get; set; } = -1;
    decimal timeoutRemaning { get; set; } = 0;

    async Task DismissToast()
    {
        await OnDismissToast.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender && toastMessage.Timeout > 0)
        {
            
            timeoutRemaning = toastMessage.Timeout * 1000;
            progressBarValue = 100;

            using var periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(100));

            while (await periodicTimer.WaitForNextTickAsync())
            {
                if (progressBarValue == 0)
                {
                    await DismissToast();
                    break;
                }

                timeoutRemaning -= 100;

                if(timeoutRemaning < 0)
                {
                    progressBarValue = 0;
                } else
                {
                    progressBarValue = (timeoutRemaning / (toastMessage.Timeout * 1000)) * 100;
                }

                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}
