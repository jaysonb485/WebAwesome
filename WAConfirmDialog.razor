@using Microsoft.JSInterop
@inherits WAComponentBase

<wa-dialog @ref="@Element"
           id="@Id"
           @attributes="@AdditionalAttributes"
           style="@StyleNames"
           class="@ClassNames"
           slot="@Slot"
           label="@Title"
           light-dismiss="false">
    @if (isVisible)
    {
        @if (ChildContent != null)
        {
            @ChildContent
        } else
        {
            <p>@_message</p>
        }
        <span slot="footer">
            <wa-button appearance="secondary" @onclick="() => OnNoClick()">@CancelButtonText</wa-button>
            <wa-button  appearance="primary" @onclick="() => OnYesClick()">@ConfirmButtonText</wa-button>
        </span>
    }
</wa-dialog>

@code {
    private DotNetObjectReference<WADialog> objRef = default!;

    /// <summary>
    /// The drawer's title as displayed in the header. You should always include a relevant title, as it is required for proper accessibility.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool LightDismiss { get; set; } = false;

    string? _message { get; set; } = null;
    string? ConfirmButtonText { get; set; } = "Ok";
    string? CancelButtonText { get; set; } = "Cancel";
    bool isVisible { get; set; } = false;
    private TaskCompletionSource<bool>? taskCompletionSource;

    public Task<bool> ShowAsync(string Title, string Message) => Show(Title, Message);

    private Task<bool> Show(string title, string? message1)
    {
        taskCompletionSource = new TaskCompletionSource<bool>();
        var task = taskCompletionSource.Task;

        this.Title = title;
        this._message = message1;

        isVisible = true;

        StateHasChanged();

        Task.Run(() => JSRuntime.InvokeVoidAsync("window.vengage.dialog.change", Id, true));        

        return task;
    }

    /// <summary>
    /// Hides confirm dialog.
    /// </summary>
    private void Hide()
    {
        isVisible = false;

        StateHasChanged();

        Task.Run(() => JSRuntime.InvokeVoidAsync("window.vengage.dialog.change", Id, false));
    }

    private void OnNoClick()
    {
        Hide();
        taskCompletionSource?.SetResult(false);
    }

    private void OnYesClick()
    {
        Hide();
        taskCompletionSource?.SetResult(true);
    }

    protected override string? ClassNames =>
      BuildClassNames(Class,
          ("dialog-deny-close", true));




}
