@inherits WAComponentBase
<wa-tooltip @ref="@Element"
            id="@Id"
            @attributes="@AdditionalAttributes"
            style="@StyleNames"
            class="@ClassNames"
            for="@TargetId"
            placement="@PlacementString"
            disabled="@Disabled"
            distance="@Distance"
            open="@Open"
            skidding="@Offset"
            show-delay="@ShowDelay"
            hide-delay="@HideDelay"
            trigger="@TriggerString">
    @ChildContent
</wa-tooltip>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Size of the tooltip arrow. Set to 0 to hide the arrow.
    /// </summary>
    [Parameter]
    public int? ArrowSize { get; set; }

    /// <summary>
    /// Maximum width the tooltip can grow to before wrapping.
    /// </summary>
    [Parameter]
    public int? MaxWidth { get; set; }

    /// <summary>
    /// ID of the component to attach the tooltip to
    /// </summary>
    [Parameter, EditorRequired]
    public string? TargetId { get; set; }

    /// <summary>
    /// The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip inside of the viewport.
    /// </summary>
    [Parameter]
    public Enums.Placement Placement { get; set; } = Enums.Placement.Top;
    string PlacementString
    {
        get
        {
            return Placement switch
            {
                Enums.Placement.Top => "top",
                Enums.Placement.TopStart => "top-start",
                Enums.Placement.TopEnd => "top-end",
                Enums.Placement.Bottom => "bottom",
                Enums.Placement.BottomStart => "bottom-start",
                Enums.Placement.BottomEnd => "bottom-end",
                Enums.Placement.Right => "right",
                Enums.Placement.RightStart => "right-start",
                Enums.Placement.RightEnd => "right-end",
                Enums.Placement.Left => "left",
                Enums.Placement.LeftStart => "left-start",
                Enums.Placement.LeftEnd => "left-end",
                _ => "top"
            };
        }
    }

    /// <summary>
    /// Disables the dropdown so the panel will not open.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// The distance in pixels from which to offset the panel away from its trigger.
    /// </summary>
    [Parameter]
    public int Distance { get; set; } = 0;

    /// <summary>
    /// The distance in pixels from which to offset the panel along its trigger.
    /// </summary>
    [Parameter]
    public int Offset { get; set; } = 0;

    /// <summary>
    /// The amount of time to wait before showing the tooltip when the user mouses in.
    /// </summary>
    [Parameter]
    public int ShowDelay { get; set; } = 150;

    /// <summary>
    /// The amount of time to wait before hiding the tooltip when the user mouses out.
    /// </summary>
    [Parameter]
    public int HideDelay { get; set; } = 0;


    [Parameter]
    public bool Open { get; set; } = false;

    [Parameter]
    public Enums.TooltipTrigger Trigger { get; set; } = Enums.TooltipTrigger.HoverFocus;
    string TriggerString
    {
        get
        {
            return Trigger switch
            {
                Enums.TooltipTrigger.Any => "click hover focus",
                Enums.TooltipTrigger.HoverFocus => "hover focus",
                Enums.TooltipTrigger.Hover => "hover",
                Enums.TooltipTrigger.Focus => "focus",
                Enums.TooltipTrigger.Click => "click",
                Enums.TooltipTrigger.Manual => "manual",
                _ => "hover focus"
            };
        }
    }

    public void Show()
    {
        Open = true;
        StateHasChanged();
    }

    public void Hide()
    {
        Open = false;
        StateHasChanged();
    }

    protected override string StyleNames => BuildStyleNames(Style,
        ($"--max-width: {MaxWidth}", MaxWidth != null),
        ($"--wa-tooltip-arrow-size: {ArrowSize}", ArrowSize != null)
    );

}

