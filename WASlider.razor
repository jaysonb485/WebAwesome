@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Linq.Expressions
@inherits WAComponentBase


<wa-slider @ref="@Element"
           id="@Id"
           @attributes="@AdditionalAttributes"
           style="@StyleNames"
           class="@ClassNames"
           slot="@Slot"
           label="@Label"
           hint="@Hint"
           min="@MinimumValue"
           max="@MaximumValue"
           default-value="@DefaultValue"
           step="@Step"
           disabled="@Disabled"
           tooltip="@TooltipPlacementString"
           with-tooltip="@ShowTooltip"
           value="@Value"
           orientation="@OrientationString"
           range="@IsRange"
           readonly="@ReadOnly"
           size="@SizeString"
           indictor-offset="@IndicatorOffset"
           with-markers="@ShowMarkers">@ChildContent</wa-slider>
@code {
    [Parameter]
    public int? Value { get; set; }
    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    private DotNetObjectReference<WASlider> objRef = default!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.vengage.slider.initialize", Id, objRef);
        }
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            try
            {
                // if (IsRenderComplete)
                // await JSRuntime.InvokeVoidAsync("window.blazorBootstrap.modal.dispose", Id);
            }
            catch (JSDisconnectedException)
            {
                // do nothing
            }

            objRef?.Dispose();

            // if (ModalService is not null && IsServiceModal)
            //     ModalService.OnShow -= OnShowAsync;
        }

        await base.DisposeAsyncCore(disposing);
    }

    protected override async Task OnInitializedAsync()
    {
        objRef ??= DotNetObjectReference.Create(this);

        // if (ModalService is not null && IsServiceModal)
        //     ModalService.OnShow += OnShowAsync;
        AdditionalAttributes ??= new Dictionary<string, object>();

        fieldIdentifier = FieldIdentifier.Create(ValueExpression);

        await base.OnInitializedAsync();
    }

    [JSInvokable("OnValueChanged")]
    public void OnSelectionChanged(int value)
    {
        Console.WriteLine($"onchange {value}");
        ValueChanged.InvokeAsync(value);
        EditContext?.NotifyFieldChanged(fieldIdentifier);
    }

    [Parameter] public Expression<Func<int>> ValueExpression { get; set; } = default!;
    [CascadingParameter] private EditContext EditContext { get; set; } = default!;

    private FieldIdentifier fieldIdentifier = default!;


    /// <summary>
    /// The slider's label. If you need to provide HTML in the label, use the label slot instead.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// The slider hint. If you need to display HTML, use the hint slot instead.
    /// </summary>
    [Parameter]
    public string? Hint { get; set; }

    /// <summary>
    /// The minimum acceptable value of the slider.
    /// </summary>
    [Parameter]
    public int? MinimumValue { get; set; } = 0;

    /// <summary>
    /// The maximum acceptable value of the slider.
    /// </summary>
    [Parameter]
    public int? MaximumValue { get; set; } = 100;

    /// <summary>
    /// Converts the slider to a range slider with two thumbs.
    /// </summary>
    [Parameter]
    public bool IsRange { get; set; } = false;

    /// <summary>
    /// The default value of the form control. Primarily used for resetting the form control.
    /// </summary>
    [Parameter]
    public int? DefaultValue { get; set; }

    /// <summary>
    /// The interval at which the slider will increase and decrease.
    /// </summary>
    [Parameter]
    public int? Step { get; set; } = 1;


    /// <summary>
    /// Disables the slider.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Makes the slider a read-only field.
    /// </summary>
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    /// <summary>
    /// The starting value from which to draw the slider's fill, which is based on its current value.
    /// </summary>
    [Parameter]
    public int? IndicatorOffset { get; set; }

    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Medium;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "medium"
            };
        }
    }


    /// <summary>
    /// Shows the tooltip. Defaults to true.
    /// </summary>
    [Parameter]
    public bool ShowTooltip { get; set; } = true;

    /// <summary>
    /// The preferred placement of the slider tooltip. Acceptable values are Placement.Top and Placement.Bottom
    /// </summary>
    [Parameter]
    public Enums.Placement TooltipPlacement { get; set; } = Enums.Placement.Top;
    string TooltipPlacementString
    {
        get
        {
            return TooltipPlacement switch
            {
                Enums.Placement.Top => "top",
                Enums.Placement.Bottom => "bottom",
                _ => "top"
            };
        }
    }

    /// <summary>
    /// The orientation of the slider. Defaults to horizontal.
    /// </summary>
    [Parameter]
    public Enums.Orientation Orientation { get; set; } = Enums.Orientation.Horizontal;
    string OrientationString
    {
        get
        {
            return Orientation switch
            {
                Enums.Orientation.Horizontal => "horizontal",
                Enums.Orientation.Vertical => "vertical",
                _ => "horizontal"
            };
        }
    }

    //// <summary>
    /// Draws markers at each step along the slider.
    /// </summary>
    [Parameter]
    public bool ShowMarkers { get; set; } = false;

}
