@inherits WAComponentBase
<wa-button-group @ref="@Element"
                 id="@Id"
                 @attributes="@AdditionalAttributes"
                 label="@Label"
                 orientation="@OrientationString"
                 size="@SizeString"
                 variant="@VariantString"
                 style="@StyleNames"
                 class="@ClassNames">
    @ChildContent
</wa-button-group>
@code {
    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// A label to use for the button group. This won't be displayed on the screen, but it will be announced by assistive devices when interacting with the control and is strongly recommended.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// The button group's orientation.
    /// </summary>
    [Parameter]
    public Enums.Orientation Orientation { get; set; } = Enums.Orientation.Horizontal;
    string OrientationString
    {
        get
        {
            return (Orientation == Enums.Orientation.Horizontal) ? "horizontal" : "vertical";
        }
    }

    /// <summary>
    /// The component's size. While you can still set the size of buttons individually, and it will override the inherited size, it is rarely a good idea to mix sizes within the same button group.
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

    /// <summary>
    /// The button group's theme variant. Defaults to neutral if not within another element with a variant.
    /// </summary>
    [Parameter]
    public Enums.Variant Variant { get; set; } = Enums.Variant.Neutral;
    string VariantString
    {
        get
        {
            return Variant switch
            {
                Enums.Variant.Brand => "brand",
                Enums.Variant.Success => "success",
                Enums.Variant.Neutral => "neutral",
                Enums.Variant.Warning => "warning",
                Enums.Variant.Danger => "danger",
                Enums.Variant.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }
}
