@using Microsoft.JSInterop
@inherits WALayoutComponentBase

<wa-page @ref="@Element"
         id="@Id"
         @attributes="@AdditionalAttributes"
         style="@StyleNames"
         class="@ClassNames"
         slot="@Slot"
         navigation-placement="@NavigationPlacementString"
         mobile-breakpoint="@MobileBreakpoint"
         nav-open="@NavOpen"
         disable-stick="@DisableSticky">
    @ChildContent
</wa-page>

@code {

    /// <summary>
    /// Whether or not the navigation drawer is open. Note, the navigation drawer is only "open" on mobile views.
    /// </summary>
    [Parameter]
    public bool NavOpen { get; set; } = false;

    /// <summary>
    /// Where to place the navigation when in the mobile viewport.
    /// </summary>
    [Parameter]
    public Enums.NavigationPlacement NavigationPlacement { get; set; } = Enums.NavigationPlacement.Start;
    string NavigationPlacementString
    {
        get
        {
            return NavigationPlacement switch
            {
                Enums.NavigationPlacement.Start => "start",
                Enums.NavigationPlacement.End => "end",
                _ => "start"
            };
        }
    }

    /// <summary>
    /// At what page width to hide the "navigation" slot and collapse into a hamburger button. Accepts both numbers (interpreted as px) and CSS lengths (e.g. 50em), which are resolved based on the root element.
    /// </summary>
    [Parameter]
    public string? MobileBreakpoint { get; set; } = "768px";

    [Parameter]
    public bool IsStickyBanner { get; set; } = true;

    [Parameter]
    public bool IsStickyHeader { get; set; } = true;

    [Parameter]
    public bool IsStickySubHeader { get; set; } = true;

    [Parameter]
    public bool IsStickyMenu { get; set; } = true;

    [Parameter]
    public bool IsStickyAside { get; set; } = true;

    private string? DisableSticky
    {
        get
        {
            (string? cssClass, bool when)[] cssClassList = { ($"banner", !IsStickyBanner),
                ($"header", !IsStickyHeader),
                ($"sub-header", !IsStickySubHeader),
                ($"menu", !IsStickyMenu),
                ($"aside", !IsStickyAside)};

            var list = new HashSet<string>();

            if (cssClassList is not null && cssClassList.Any())
                foreach (var (cssClass, when) in cssClassList)
                    if (!string.IsNullOrWhiteSpace(cssClass) && when)
                        list.Add(cssClass);

            if (list.Any())
                return string.Join(" ", list);

            return string.Empty;
        }
    }

    /// <summary>
    /// Shows the mobile navigation drawer
    /// </summary>
    public async Task ShowNavigation()
    {
        await JSRuntime.InvokeVoidAsync("window.vengage.navigation.show", Id);
    }

    /// <summary>
    /// Hides the mobile navigation drawer
    /// </summary>
    public async Task HideNavigation()
    {
        await JSRuntime.InvokeVoidAsync("window.vengage.navigation.hide", Id);
    }

    public async Task ToggleNavigation()
    {
        await JSRuntime.InvokeVoidAsync("window.vengage.navigation.toggle", Id);
    }

}
