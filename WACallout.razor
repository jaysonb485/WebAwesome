@inherits WAComponentBase
<wa-callout @ref="@Element"
            id="@Id"
            @attributes="@AdditionalAttributes"
            variant="@VariantString"
            appearance="@AppearanceString"
            size="@SizeString"
            style="@StyleNames"
            class="@ClassNames">
    @if (!String.IsNullOrEmpty(IconName))
    {
        <wa-icon name="@IconName" variant="@IconVariant" family="@IconFamily" slot="icon"></wa-icon>
    }
    @ChildContent
</wa-callout>
@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;
    /// <summary>
    /// The name of the icon to draw in the prefix slot. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the prefix slot icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? IconFamily { get; set; }
    /// <summary>
    /// The name of the prefix slot icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? IconVariant { get; set; }


    /// <summary>
    /// The callout's theme variant. Defaults to brand if not within another element with a variant.
    /// </summary>
    [Parameter]
    public Enums.Variant Variant { get; set; } = Enums.Variant.Inherit;
    string VariantString
    {
        get
        {
            return Variant switch
            {
                Enums.Variant.Brand => "brand",
                Enums.Variant.Success => "success",
                Enums.Variant.Neutral => "neutral",
                Enums.Variant.Warning => "warning",
                Enums.Variant.Danger => "danger",
                Enums.Variant.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

    /// <summary>
    /// The callout's visual appearance.
    /// </summary>
    [Parameter]
    public Enums.Appearance Appearance { get; set; } = Enums.Appearance.FilledOutlined;
    string AppearanceString
    {
        get
        {
            return Appearance switch
            {
                Enums.Appearance.Accent => "accent",
                Enums.Appearance.AccentOutlined => "accent outlined",
                Enums.Appearance.Filled => "filled",
                Enums.Appearance.FilledOutlined => "filled outlined",
                Enums.Appearance.Outlined => "outlined",
                Enums.Appearance.Plain => "plain",
                _ => "accent"
            };
        }
    }

    /// <summary>
    /// The callout's size.
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }
}
