@inherits WAComponentBase
<wa-animation @ref="@Element"
              id="@Id"
              @attributes="@AdditionalAttributes"
              name="@Name"
              play="@Play"
              delay="@Delay"
              direction="@DirectionString"
              duration="@Duration"
              easing="@Easing"
              end-delay="@EndDelay"
              style="@StyleNames"
              class="@ClassNames"
            iterations="@Iterations">
    @ChildContent
</wa-animation>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    /// <summary>
    /// The name of the built-in animation to use.
    /// </summary>
    [Parameter]
    public Enums.AnimationName? Name { get; set; }

    /// <summary>
    /// Sets whether the animation will commence automatically when started.
    /// </summary>
    [Parameter]
    public bool AutoStart { get; set; } = true;
    bool Play { get; set; } = false;
    public bool IsPlaying
    {
        get
        {
            return Play;
        }
    }
    /// <summary>
    /// The number of milliseconds to delay the start of the animation.
    /// </summary>
    [Parameter]
    public int Delay { get; set; } = 0;

    /// <summary>
    /// Determines the direction of playback as well as the behavior when reaching the end of an iteration
    /// </summary>
    [Parameter]
    public Enums.AnimationDirection Direction { get; set; } = Enums.AnimationDirection.Normal;
    string DirectionString
    {
        get
        {
            return Direction switch
            {
                Enums.AnimationDirection.Normal => "normal",
                Enums.AnimationDirection.Reverse => "reverse",
                Enums.AnimationDirection.Alternate => "alternate",
                Enums.AnimationDirection.AlternateReverse => "alternate-reverse",
                _ => "normal"
            };
        }
    }
    /// <summary>
    /// The number of milliseconds each iteration of the animation takes to complete.
    /// </summary>
    [Parameter]
    public int Duration { get; set; } = 1000;
    /// <summary>
    /// The easing function to use for the animation. This can be a Web Awesome easing function or a custom easing function such as cubic-bezier(0, 1, .76, 1.14).
    /// </summary>
    [Parameter]
    public string Easing { get; set; } = "linear";
    /// <summary>
    /// The number of milliseconds to delay after the active period of an animation sequence.
    /// </summary>
    [Parameter]
    public int EndDelay { get; set; } = 0;

    /// <summary>
    /// The number of iterations to run before the animation completes. Defaults to Infinity, which loops.
    /// </summary>
    [Parameter]
    public int? Iterations { get; set; } 


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
            if (AutoStart)
            {
                Play = true;
                StateHasChanged();
            }
    }
    /// <summary>
    /// Starts the animation
    /// </summary>
    public void StartAnimation()
    {
        Play = true;
        StateHasChanged();
    }

    /// <summary>
    /// Stops the animation
    /// </summary>
    public void StopAnimation()
    {
        Play = false;
        StateHasChanged();
    }

}
