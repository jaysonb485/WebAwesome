@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@inherits WAComponentBase
<wa-switch @ref="@Element"
id="@Id"
@attributes="@AdditionalAttributes"
value="@Value"
style="@StyleNames"
class="@ClassNames"
checked="@Value"
disabled="@Disabled"
size="@SizeString"
hint="@Hint"
@onchange="valueChanged">@Label@ChildContent</wa-switch>

@code {
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Value { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    void valueChanged(ChangeEventArgs e)
    {
        ValueChanged.InvokeAsync(((string?)e.Value == "on"));
        EditContext?.NotifyFieldChanged(fieldIdentifier);
    }

    [Parameter] public Expression<Func<bool>> ValueExpression { get; set; } = default!;
    [CascadingParameter] private EditContext EditContext { get; set; } = default!;

    private FieldIdentifier fieldIdentifier = default!;

    protected override void OnInitialized()
    {
        AdditionalAttributes ??= new Dictionary<string, object>();

        fieldIdentifier = FieldIdentifier.Create(ValueExpression);

        base.OnInitialized();
    }

    /// <summary>
    /// The checkbox's size.
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

    /// <summary>
    /// Disables the checkbox.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// The checkbox's hint text.
    /// </summary>
    [Parameter]
    public string? Hint { get; set; }
}
