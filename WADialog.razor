@using Microsoft.JSInterop
@inherits WAComponentBase
<wa-dialog @ref="@Element"
id="@Id"
@attributes="@AdditionalAttributes"
style="@StyleNames"
class="@ClassNames"
label="@Title"
with-header="@withHeader"
with-footer="@withFooter"
light-dismiss="@LightDismiss">
    @if (HeaderActions != null)
    {
        <span slot="header-actions">@HeaderActions</span>
    }
    @BodyContent
    @if (withFooter)
    {
        <span slot="footer">@FooterContent</span>
    }
</wa-dialog>

@code {
    private DotNetObjectReference<WADialog> objRef = default!;
    [Parameter]
    public RenderFragment BodyContent { get; set; } = default!;
    bool isVisible { get; set; } = false;

    /// <summary>
    /// The drawer's title as displayed in the header. You should always include a relevant title, as it is required for proper accessibility.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }
    bool withHeader
    {
        get
        {
            return (!String.IsNullOrEmpty(Title) || (HeaderActions != null));
        }
    }
    /// <summary>
    /// Renders the drawer with a footer.
    /// </summary>
    [Parameter]
    public RenderFragment? FooterContent { get; set; }
    bool withFooter { get { return FooterContent != null; } }

    [Parameter]
    public RenderFragment? HeaderActions { get; set; }
    /// <summary>
    /// When enabled, the drawer will be closed when the user clicks outside of it. Defaults to true.
    /// </summary>
    [Parameter]
    public bool LightDismiss { get; set; } = true;

    /// <summary>
    /// The preferred width of the dialog in CSS units. Note that the dialog will shrink to accommodate smaller screens.
    /// </summary>
    [Parameter]
    public string? PreferredWidth { get; set; }

    protected override string? StyleNames => BuildStyleNames(Style, ($"--width:{PreferredWidth}", !String.IsNullOrEmpty(PreferredWidth)));

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            try
            {
                // if (IsRenderComplete)
                // await JSRuntime.InvokeVoidAsync("window.blazorBootstrap.modal.dispose", Id);
            }
            catch (JSDisconnectedException)
            {
                // do nothing
            }

            objRef?.Dispose();

            // if (ModalService is not null && IsServiceModal)
            //     ModalService.OnShow -= OnShowAsync;
        }

        await base.DisposeAsyncCore(disposing);
    }

    protected override async Task OnInitializedAsync()
    {
        objRef ??= DotNetObjectReference.Create(this);

        // if (ModalService is not null && IsServiceModal)
        //     ModalService.OnShow += OnShowAsync;

        await base.OnInitializedAsync();
    }


    /// <summary>
    /// Hides the dialog.
    /// </summary>
    public async Task HideAsync()
    {
        isVisible = false;
        await JSRuntime.InvokeVoidAsync("window.changeModal", Id, false);
    }

    /// <summary>
    /// Shows the dialog.
    /// </summary>
    public async Task ShowAsync()
    {
        isVisible = false;
        await JSRuntime.InvokeVoidAsync("window.changeModal", Id, true);
    }
}
