@inherits WAComponentBase


<wa-zoomable-frame @ref="@Element"
                   id="@Id"
                   @attributes="@AdditionalAttributes"
                   style="@StyleNames"
                   class="@ClassNames"
                   slot="@Slot"
                   src="@SourceUrl"
                   srcdoc="@SourceHtml"
                   allowfullscreen="@AllowFullScreen"
                   loading="@(LazyLoad ? "lazy" : "eager")"
                   referrerpolicy="@ReferrerPolicy"
                   sandbox="@Sandbox"
                   zoom="@Zoom"
                   zoom-levels="@ZoomLevels"
                   without-controls="@HideZoomControls"
                   without-interaction="@DisableInteraction">
    @if (!String.IsNullOrEmpty(ZoomInIconName))
    {
        <wa-icon name="@ZoomInIconName" variant="@ZoomInIconVariant" family="@ZoomInIconFamily" slot="zoom-in-icon"></wa-icon>
    }
    @if (!String.IsNullOrEmpty(ZoomOutIconName))
    {
        <wa-icon name="@ZoomOutIconName" variant="@ZoomOutIconVariant" family="@ZoomOutIconFamily" slot="zoom-out-icon"></wa-icon>
    }
    @ChildContent
</wa-zoomable-frame>

@code {
    /// <summary>
    /// The name of the icon to draw for the ZoomIn icon. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? ZoomInIconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the ZoomIn icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? ZoomInIconFamily { get; set; }
    /// <summary>
    /// The name of the ZoomIn icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? ZoomInIconVariant { get; set; }

    /// <summary>
    /// The name of the icon to draw for the ZoomOut icon. Rotates on open and close. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? ZoomOutIconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the ZoomOut icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? ZoomOutIconFamily { get; set; }
    /// <summary>
    /// The name of the ZoomOut icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? ZoomOutIconVariant { get; set; }

    /// <summary>
    /// The URL of the content to display.
    /// </summary>
    [Parameter]
    public string? SourceUrl { get; set; }

    /// <summary>
    /// Inline HTML to display.
    /// </summary>
    [Parameter]
    public string? SourceHtml { get; set; }

    /// <summary>
    /// Allows fullscreen mode.
    /// </summary>
    [Parameter]
    public bool AllowFullScreen { get; set; } = false;

    /// <summary>
    /// Controls iframe loading behavior. Default is eager loading.
    /// </summary>
    [Parameter]
    public bool LazyLoad { get; set; } = false;

    /// <summary>
    /// Controls referrer information.
    /// </summary>
    [Parameter]
    public string? ReferrerPolicy { get; set; }

    /// <summary>
    /// Security restrictions for the iframe.
    /// </summary>
    [Parameter]
    public string? Sandbox { get; set; }

    /// <summary>
    /// The current zoom of the frame, e.g. 0 = 0% and 1 = 100%.
    /// </summary>
    [Parameter]
    public double Zoom { get; set; } = 1;

    /// <summary>
    /// The zoom levels to step through when using zoom controls. This does not restrict programmatic changes to the zoom.
    /// </summary>
    [Parameter]
    public string ZoomLevels { get; set; } = "25% 50% 75% 100% 125% 150% 175% 200%";

    /// <summary>
    /// Removes the zoom controls.
    /// </summary>
    [Parameter]
    public bool HideZoomControls { get; set; } = false;

    /// <summary>
    /// Disables interaction when present.
    /// </summary>
    [Parameter]
    public bool DisableInteraction { get; set; } = false;

}
