@inherits WAComponentBase
<wa-button @ref="@Element"
           id="@Id"
           @attributes="@AdditionalAttributes"
           appearance="@AppearanceString"
           variant="@VariantString"
           disabled="@Disabled"
           loading="@Loading"
           pill="@Pill"
           type="@ButtonTypeString"
           style="@StyleNames"
           class="@ClassNames"
           @onclick="@OnClick"
           size="@SizeString">
           <wa-icon slot="label" name="@IconName" family="@IconFamily" variant="@IconVariant"></wa-icon>
</wa-button>


@code {

    /// <summary>
    /// The name of the icon to draw in the prefix slot. Available names depend on the icon library being used.
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }
    /// <summary>
    /// The family of icons to choose from for the prefix slot icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? IconFamily { get; set; }
    /// <summary>
    /// The name of the prefix slot icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
    /// </summary>
    [Parameter]
    public string? IconVariant { get; set; }

    /// <summary>
    /// Draws the button in a loading state.
    /// </summary>
    [Parameter]
    public bool Loading { get; set; } = false;

    /// <summary>
    /// Draws a pill-style button with rounded edges.
    /// </summary>
    [Parameter]
    public bool Pill { get; set; } = false;

    /// <summary>
    /// The type of button. When the type is submit, the button will submit the surrounding form.
    /// </summary>
    [Parameter]
    public Enums.ButtonType ButtonType { get; set; } = Enums.ButtonType.Button;
    string ButtonTypeString
    {
        get
        {
            return ButtonType switch
            {
                Enums.ButtonType.Button => "button",
                Enums.ButtonType.Submit => "submit",
                Enums.ButtonType.Reset => "reset",
                _ => "button"
            };
        }
    }


    /// <summary>
    /// An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and ignored by assistive devices.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Disables the button.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public EventCallback<MouseEventArgs?> OnClick { get; set; }

    [Parameter]
    public string? Tooltip { get; set; }

    /// <summary>
    /// The button's theme variant. Defaults to neutral if not within another element with a variant.
    /// </summary>
    [Parameter]
    public Enums.Variant Variant { get; set; } = Enums.Variant.Inherit;
    string VariantString
    {
        get
        {
            return Variant switch
            {
                Enums.Variant.Brand => "brand",
                Enums.Variant.Success => "success",
                Enums.Variant.Neutral => "neutral",
                Enums.Variant.Warning => "warning",
                Enums.Variant.Danger => "danger",
                Enums.Variant.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

    /// <summary>
    /// The button's visual appearance.
    /// </summary>
    [Parameter]
    public Enums.Appearance Appearance { get; set; } = Enums.Appearance.Accent;
    string AppearanceString
    {
        get
        {
            return Appearance switch
            {
                Enums.Appearance.Accent => "accent",
                Enums.Appearance.AccentOutlined => "accent outlined",
                Enums.Appearance.Filled => "filled",
                Enums.Appearance.FilledOutlined => "filled outlined",
                Enums.Appearance.Outlined => "outlined",
                Enums.Appearance.Plain => "plain",
                _ => "accent"
            };
        }
    }

    /// <summary>
    /// The button's size.
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

}