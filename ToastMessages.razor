@inherits WAComponentBase
@inject ToastService toastService
<div class="toast-container">
    @if (Toasts != null && Toasts.Count > 0)
    {
        foreach (ToastMessage toastMessage in Toasts)
        {
            <Toast toastMessage="@toastMessage" OnDismissToast="@(() => DismissToast(toastMessage))" />
        }
    }
</div>

@code {
    public List<ToastMessage>? Toasts { get; set; }


    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            Toasts = null;

            if (toastService is not null)
                toastService.OnNotify -= OnNotify;
        }

        await base.DisposeAsyncCore(disposing);
    }

    protected override void OnInitialized()
    {
        if (toastService is not null)
            toastService.OnNotify += OnNotify;

        base.OnInitialized();
    }

    private void OnNotify(ToastMessage toastMessage)
    {
        if (toastMessage is null)
            return;

        Toasts ??= new List<ToastMessage>();

        Toasts.Add(toastMessage);

        StateHasChanged();
    }

    void DismissToast(ToastMessage toastMessage)
    {
        Toasts?.Remove(toastMessage);
        StateHasChanged();
    }




    public class ToastMessage
    {
        public string? Title { get; set; }
        public string? Message { get; set; }
        /// <summary>
        /// The name of the icon to draw in the prefix slot. Available names depend on the icon library being used.
        /// </summary>
        public string? IconName { get; set; }
        /// <summary>
        /// The family of icons to choose from for the prefix slot icon. For Font Awesome Free (default), valid options include classic and brands. For Font Awesome Pro subscribers, valid options include, classic, sharp, duotone, and brands. Custom icon libraries may or may not use this property.
        /// </summary>
        public string? IconFamily { get; set; }
        /// <summary>
        /// The name of the prefix slot icon's variant. For Font Awesome, valid options include thin, light, regular, and solid for the classic and sharp families. Some variants require a Font Awesome Pro subscription. Custom icon libraries may or may not use this property.
        /// </summary>
        public string? IconVariant { get; set; }

        public bool Dismissable { get; set; } = true;
        public int Timeout { get; set; } = 0;
        public WebAwesome.Enums.Variant Variant { get; set; } = Enums.Variant.Brand;
    }
}