@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@inherits WAComponentBase
<wa-color-picker @ref="@Element"
                 id="@Id"
                 @attributes="@AdditionalAttributes"
                 style="@StyleNames"
                 class="@ClassNames"
                 slot="@Slot"
                 label="@Label"
                 value="@Value"
                 hint="@Hint"
                 format="@ColorFormatString"
                 size="@SizeString"
                 without-format-toggle="@(!AllowFormatSelector)"
                 disabled="@Disabled"
                 opacity="@ShowOpacitySlider"
                 uppercase="@UppercaseValues"
                 swatches="@Swatches"
                 @onchange="valueChanged"></wa-color-picker>

@code {
    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; } = default!;
    /// <summary>
    /// The color picker's label.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }
    /// <summary>
    /// The color picker's hint.
    /// </summary>
    [Parameter]
    public string? Hint { get; set; }

    /// <summary>
    /// The format to use. If opacity is enabled, these will translate to HEXA, RGBA, HSLA, and HSVA respectively. The color picker will accept user input in any format (including CSS color names) and convert it to the desired format.
    /// </summary>
    [Parameter]
    public Enums.ColorFormat ColorFormat { get; set; } = Enums.ColorFormat.Hex;
    string ColorFormatString
    {
        get
        {
            return ColorFormat switch
            {
                Enums.ColorFormat.Hex => "hex",
                Enums.ColorFormat.HSL => "hsl",
                Enums.ColorFormat.RGB => "rgb",
                Enums.ColorFormat.HSV => "hsv",
                _ => "hex"
            };
        }
    }
    /// <summary>
    /// Determines the size of the color picker's trigger
    /// </summary>
    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Inherit;
    string SizeString
    {
        get
        {
            return Size switch
            {
                Enums.Size.Small => "small",
                Enums.Size.Medium => "medium",
                Enums.Size.Large => "large",
                Enums.Size.Inherit => "inherit",
                _ => "inherit"
            };
        }
    }

    /// <summary>
    /// Shows the button that lets users toggle between formats. Default is true.
    /// </summary>
    [Parameter]
    public bool AllowFormatSelector { get; set; } = true;

    /// <summary>
    /// Disables the color picker.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Shows the opacity slider. Enabling this will cause the formatted value to be HEXA, RGBA, or HSLA.
    /// </summary>
    [Parameter]
    public bool ShowOpacitySlider { get; set; } = false;

    /// <summary>
    /// By default, values are lowercase. With this attribute, values will be uppercase instead.
    /// </summary>
    [Parameter]
    public bool UppercaseValues { get; set; } = false;

    /// <summary>
    /// One or more predefined color swatches to display as presets in the color picker. Can include any format the color picker can parse, including HEX(A), RGB(A), HSL(A), HSV(A), and CSS color names. Each color must be separated by a semicolon (;).
    /// </summary>
    [Parameter]
    public string? Swatches { get; set; }


    void valueChanged(ChangeEventArgs e)
    {
        ValueChanged.InvokeAsync((string?)e.Value ?? string.Empty);
        EditContext?.NotifyFieldChanged(fieldIdentifier);
    }

    [Parameter] public Expression<Func<string>> ValueExpression { get; set; } = default!;
    [CascadingParameter] private EditContext EditContext { get; set; } = default!;

    private FieldIdentifier fieldIdentifier = default!;

    protected override void OnInitialized()
    {
        AdditionalAttributes ??= new Dictionary<string, object>();

        fieldIdentifier = FieldIdentifier.Create(ValueExpression);

        base.OnInitialized();
    }
}
